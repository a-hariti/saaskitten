generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  // _id to keep it consistent with MongoDB
  id                       String                   @id @map("_id")
  email                    String                   @unique()
  email_verified           Boolean                  @default(false)
  created_at               DateTime                 @default(now())
  updated_at               DateTime                 @updatedAt
  email_verification_token EmailVerificationToken[]
  password_reset_token     PasswordResetToken[]
  plan                     Plan?
  keys                     Key[]
  sessions                 Session[]

  @@map("users")
}

model Plan {
  user_id String @id @map("_id")
  plan    String @default("free") /// either "free" | "pro"
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@map("plans")
}

model Key {
  id              String  @id @map("_id")
  user_id         String
  hashed_password String?
  user            User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@map("keys")
}

model Session {
  id             String @id @map("_id")
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@map("sessions")
}

model EmailVerificationToken {
  id      String @id @map("_id")
  user_id String
  expires BigInt
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("email_verification_tokens")
}

model PasswordResetToken {
  id      String @id @map("_id")
  user_id String
  expires BigInt
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("password_reset_tokens")
}
